class Solution {
    public int calculate(String s) {
        Stack<State> stack = new Stack<>();//You add an item to stack to say upper level state
        //Only addition and subtraction therefore, all you need to track is last number seen and the sign
        int sign = 1; //1 and -1
        int number = 0;
        //return
        int res = 0;
        
        for (int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if (Character.isDigit(c)){
                //Convert the character into actual number
                number = number*10 + (int)(c - '0'); //Could be more than 1 character digit hence we need to shift
            }else if (c == '+'){
                res += sign*number;
                number = 0;//Reset the number 
                sign = 1;
            }else if (c == '-'){
                res += sign*number;
                number = 0; //We are going to read a new number
                sign = -1;
            }else if (c == '('){
                State state = new State(sign, res);
                stack.push(state);
                //Reset to inital state (sign = 1, number = 0, res = 0) for lower level (treat as resolving problem)
                sign = 1;
                number = 0;
                res = 0; 
            }else if (c == ')') {
                //Done with this lower level state, so get restore previous state results and combine them
                res += sign*number; //Don't forget the last number
                number = 0; 
                State previousState = stack.pop();
                res*= previousState.sign;
                res += previousState.number;
            }
        }
        //Dont' forget the last number
        res += sign*number;
        
        return res;
        
    }
    
    class State{
        int sign;
        int number;
        
        public State(int sign, int res){
            this.sign = sign;
            this.number = res;
        }
    }
}
