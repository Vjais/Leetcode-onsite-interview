Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

Example 1:

Input: [[0, 30],[5, 10],[15, 20]]
Output: 2
Example 2:

Input: [[7,10],[2,4]]
Output: 1


public int minMeetingRooms(int[][] intervals) {
        //error checking
        if(intervals==null || intervals.length==0){
            return 0;
        }
       //sort according to the starting time 
        Arrays.sort(intervals,(int a[],int b[])->a[0]-b[0]);
        //min heap
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        //add first meeting
        pq.add(intervals[0][1]);
        
        for(int i=1;i<intervals.length;i++){
            //current meeting
           if(intervals[i][0]>=pq.peek()){
               pq.poll();
           }
            pq.add(intervals[i][1]);
        }
      return pq.size();  
       
        
    }
}

   
    
   
    
