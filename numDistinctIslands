public int numDistinctIslands(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        Set<String> answer = new HashSet<>();
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1) {
                    StringBuilder sb = new StringBuilder();
                    dfs(grid, i, j, sb, "");
                    answer.add(sb.toString());
                }
            }
        }
        System.out.println(Arrays.toString(answer.toArray()));
        return answer.size();
    }
    
    private void dfs(int[][] grid, int i, int j, StringBuilder sb, String direction){
        if(i < 0 || j < 0 || i > grid.length-1 || j > grid[0].length-1 || grid[i][j] == 0){
            sb.append("0");
            return;    
        }
        grid[i][j] = 0;
        sb.append(direction);
        dfs(grid, i, j-1, sb, "1");
        dfs(grid, i-1, j, sb, "2");
        dfs(grid, i+1, j, sb, "3");
        dfs(grid, i, j+1, sb, "4");
    }
}
