public int islandPerimeter(int[][] grid) {
    	if(grid == null || grid.length == 0|| grid[0].length == 0)
    		return 0;
    	int perimeter = 0;
    	int n = grid.length;
    	int m = grid[0].length;
        for(int i = 0; i < n; i++) {
        	for(int j = 0; j < m; j++) {
        		if(grid[i][j] == 1) {
        			if(i == 0 || grid[i - 1][j] == 0)
        				perimeter++;
        			if(i == n -1 || grid[i + 1][j] == 0)
        				perimeter++;
        			if(j == 0 || grid[i][j - 1] == 0)
        				perimeter++;
        			if(j == m - 1|| grid[i][j + 1] == 0)
        				perimeter ++;
        		}
        	}
        }
        return perimeter;
    }
}
//area
 public int maxAreaOfIsland(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int area = dfs(grid, i, j, m, n, 0);
                    max = Math.max(area, max);
                }
            }
        }
        return max;
    }

    int dfs(int[][] grid, int i, int j, int m, int n, int area) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) {
            return area;
        }
        grid[i][j] = 0;
        area++;
        area = dfs(grid, i + 1, j, m, n, area);
        area = dfs(grid, i, j + 1, m, n, area);
        area = dfs(grid, i - 1, j, m, n, area);
        area = dfs(grid, i, j - 1, m, n, area);
        return area;
    }
